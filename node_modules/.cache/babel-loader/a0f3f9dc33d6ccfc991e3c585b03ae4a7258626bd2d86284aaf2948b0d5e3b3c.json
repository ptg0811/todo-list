{"ast":null,"code":"var _jsxFileName = \"/Users/bagtaegeun/projects/todo-list/src/App.jsx\",\n  _s = $RefreshSig$();\n// React를 사요한다. state hook을 사용하기 위해 { useState } 를 불러옴\nimport React, { useState } from \"react\";\nimport \"./App.css\"; // 🔥 반드시 App.css 파일을 import 해줘야 합니다.\n// id 값의 혼선을 방지하기 위해 key값으로 uuid를 설정하였음.\n// 자세한 내용은 본문의 uuid를 참고\nimport uuid from \"react-uuid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  // todoLists 객체로 state hook을 지정해주었음\n  const [todoLists, setTodoLists] = useState([{\n    // 순서를 지정하기 위해 id값을 지정하였음\n    id: 0,\n    // id값만 가지고 있을 경우 지칭상의 혼선이 올수 있기 때문에 uuid를 지정하였음\n    key: uuid(),\n    title: \"리액트 공부하기\",\n    desc: \"리액트 기초를 공부해봅시다\",\n    // 진행중과 완료 상태를 표현하기 위해 isDone 값을 true, false로 지정하였음\n    isDone: false\n  }, {\n    id: 1,\n    key: uuid(),\n    title: \"리액트 알아보기\",\n    desc: \"리액트 기초를 알아봅시다\",\n    isDone: true\n  }]);\n  const deleteTodoListHandler = key => {\n    // '삭제' 버튼을 클릭했을때 실행되는 handler\n    // filter를 통해서 받아오는 key값과 다른 key값을 가진 객체들만으로 새로운 배열을 구성해서 state로 넘겨주는 것.\n    const newTodoList = todoLists.filter(todoList => todoList.key !== key);\n    setTodoLists(newTodoList);\n  };\n  const onChangeHandler = key => {\n    // 완료 혹은 취소 버튼을 클릭했을때 실행되는 handler\n    // 받아오는 key값과 같은 key값을 가진 객체를 배열에서 찾아 그 인덱스 값을 리턴하는 함수 findIndex를 선언\n    const index = todoLists.findIndex(todoList => todoList.key === key);\n\n    // spread order로 todoLists 배열의 복사본을 생성하였음\n    // ????   복사본은 왜 만들어야 할까? 원본은 어떻게 되는 걸까?\n    const copyTodo = [...todoLists];\n\n    // 이 부분이 해석이 안된다.\n    // ????   ...copyTodo[index] 이것은 무슨의미일까?\n    // ????   spread syntax의 정확한 의미는 무엇일까?\n    if (copyTodo[index].isDone === true) {\n      copyTodo[index] = {\n        ...copyTodo[index],\n        isDone: false\n      };\n    } else {\n      copyTodo[index] = {\n        ...copyTodo[index],\n        isDone: true\n      };\n    }\n\n    // setTodoLists 로 새로운 배열을 복사해준다.\n    setTodoLists(copyTodo);\n  };\n  const workingLists = todoLists\n  // 객체중에서 isDone 값이 false인 값을 골라 새로운 배열을 만들어줌\n  .filter(todoList => todoList.isDone === false)\n  // 각각의 요소에 대해 한번씩 순서대로 불러 그 함수의 반환값으로 새로운 배열을 만들어줌\n  .map(todoList => {\n    return (\n      /*#__PURE__*/\n      // child component인 List를 불러주고 아래와 같이 값을 넣어준다.\n      _jsxDEV(List, {\n        handleDelete: deleteTodoListHandler,\n        handleDone: onChangeHandler,\n        todoList: todoList\n      }, todoList.key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)\n    );\n  });\n  const doneLists = todoLists.filter(todoList => todoList.isDone === true).map(todoList => {\n    return /*#__PURE__*/_jsxDEV(List, {\n      handleDelete: deleteTodoListHandler,\n      handleDone: onChangeHandler,\n      todoList: todoList\n    }, todoList.key, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this);\n  });\n\n  // 새로운 title과 desc를 받아 새로운 객체를 만들기 위해 state hook을 선언해줌\n  const [title, setTitle] = useState(\"\");\n  const [desc, setDesc] = useState(\"\");\n\n  // 추가하기를 클랙했을때 실행할 event handler\n  const onSubmitHandler = () => {\n    // title 과 desc가 아무것도 입력되지 않으면 실행되지 않도록 if 함수를 사용함.\n    if (title !== \"\" && desc !== \"\") {\n      // 새로운 객체를 생성해줌. isDone의 기본값은 false이다.\n      const newTodoLists = {\n        id: todoLists.length + 1,\n        key: uuid(),\n        title: title,\n        desc: desc,\n        isDone: false\n      };\n\n      // todoLists 배열을 복사해주고 newTodoLists를 추가해줌\n      setTodoLists([...todoLists, newTodoLists]);\n    } else {\n      return null;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    class: \"layout\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"My Todo List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"React\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"add-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-style\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"form-label\",\n          children: \"\\uC81C\\uBAA9\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"add-input\"\n          // 입력되는 값을 title로 넘겨줌\n          ,\n          value: title\n          // state함수를 이용하여 입력되는 값을 배열로 넘겨줌\n          ,\n          onChange: e => setTitle(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"form-label\",\n          children: \"\\uB0B4\\uC6A9\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"add-input\",\n          value: desc,\n          onChange: e => setDesc(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"add-button\",\n        onClick: onSubmitHandler,\n        children: \"\\uCD94\\uAC00\\uD558\\uAE30\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"list-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"list-title\",\n          children: \"Working.. \\uD83D\\uDD25\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"app-style\" // 렌더링되도록 {workingLists} 변수를 받아옴\n          ,\n          children: workingLists\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"list-title\",\n          children: \"Done..! \\uD83C\\uDF89\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"app-style\",\n          children: doneLists\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 5\n  }, this);\n};\n\n// child component인 List를 설정\n_s(App, \"nIRPf6PkIrvR+P3RajG0wu5q6XM=\");\n_c = App;\nfunction List(props) {\n  return (\n    /*#__PURE__*/\n    // 컴포넌트로 이러한 사각형 형태의 카드를 만들어준다.\n    _jsxDEV(\"div\", {\n      className: \"square-style\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: props.todoList.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: props.todoList.desc\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button-set\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"todo-delete-button button\"\n          // props로 handleDelete값을 받아오면서 key를 함수로 넘겨준다.\n          ,\n          onClick: () => {\n            props.handleDelete(props.todoList.key);\n          },\n          children: \"\\uC0AD\\uC81C\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"todo-complete-button button\",\n          onClick: () => {\n            props.handleDone(props.todoList.key);\n          }\n          // isDone 값에 따라 버튼의 글자가 바뀌도록 삼항연산자를 설정하고 렌더링해준다.\n          // {조건문 ? true인 경우 : false인 경우}\n          ,\n          children: props.todoList.isDone === true ? \"취소\" : \"완료\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 5\n    }, this)\n  );\n}\n_c2 = List;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"List\");","map":{"version":3,"names":["React","useState","uuid","App","todoLists","setTodoLists","id","key","title","desc","isDone","deleteTodoListHandler","newTodoList","filter","todoList","onChangeHandler","index","findIndex","copyTodo","workingLists","map","doneLists","setTitle","setDesc","onSubmitHandler","newTodoLists","length","e","target","value","List","props","handleDelete","handleDone"],"sources":["/Users/bagtaegeun/projects/todo-list/src/App.jsx"],"sourcesContent":["// React를 사요한다. state hook을 사용하기 위해 { useState } 를 불러옴\nimport React, { useState } from \"react\";\nimport \"./App.css\"; // 🔥 반드시 App.css 파일을 import 해줘야 합니다.\n// id 값의 혼선을 방지하기 위해 key값으로 uuid를 설정하였음.\n// 자세한 내용은 본문의 uuid를 참고\nimport uuid from \"react-uuid\";\n\nconst App = () => {\n  // todoLists 객체로 state hook을 지정해주었음\n  const [todoLists, setTodoLists] = useState([\n    {\n      // 순서를 지정하기 위해 id값을 지정하였음\n      id: 0,\n      // id값만 가지고 있을 경우 지칭상의 혼선이 올수 있기 때문에 uuid를 지정하였음\n      key: uuid(),\n      title: \"리액트 공부하기\",\n      desc: \"리액트 기초를 공부해봅시다\",\n      // 진행중과 완료 상태를 표현하기 위해 isDone 값을 true, false로 지정하였음\n      isDone: false,\n    },\n    {\n      id: 1,\n      key: uuid(),\n      title: \"리액트 알아보기\",\n      desc: \"리액트 기초를 알아봅시다\",\n      isDone: true,\n    },\n  ]);\n\n  const deleteTodoListHandler = (key) => {\n    // '삭제' 버튼을 클릭했을때 실행되는 handler\n    // filter를 통해서 받아오는 key값과 다른 key값을 가진 객체들만으로 새로운 배열을 구성해서 state로 넘겨주는 것.\n    const newTodoList = todoLists.filter((todoList) => todoList.key !== key);\n    setTodoLists(newTodoList);\n  };\n\n  const onChangeHandler = (key) => {\n    // 완료 혹은 취소 버튼을 클릭했을때 실행되는 handler\n    // 받아오는 key값과 같은 key값을 가진 객체를 배열에서 찾아 그 인덱스 값을 리턴하는 함수 findIndex를 선언\n    const index = todoLists.findIndex((todoList) => todoList.key === key);\n\n    // spread order로 todoLists 배열의 복사본을 생성하였음\n    // ????   복사본은 왜 만들어야 할까? 원본은 어떻게 되는 걸까?\n    const copyTodo = [...todoLists];\n\n    // 이 부분이 해석이 안된다.\n    // ????   ...copyTodo[index] 이것은 무슨의미일까?\n    // ????   spread syntax의 정확한 의미는 무엇일까?\n    if (copyTodo[index].isDone === true) {\n      copyTodo[index] = { ...copyTodo[index], isDone: false };\n    } else {\n      copyTodo[index] = { ...copyTodo[index], isDone: true };\n    }\n\n    // setTodoLists 로 새로운 배열을 복사해준다.\n    setTodoLists(copyTodo);\n  };\n\n  const workingLists = todoLists\n    // 객체중에서 isDone 값이 false인 값을 골라 새로운 배열을 만들어줌\n    .filter((todoList) => todoList.isDone === false)\n    // 각각의 요소에 대해 한번씩 순서대로 불러 그 함수의 반환값으로 새로운 배열을 만들어줌\n    .map((todoList) => {\n      return (\n        // child component인 List를 불러주고 아래와 같이 값을 넣어준다.\n        <List\n          handleDelete={deleteTodoListHandler}\n          handleDone={onChangeHandler}\n          todoList={todoList}\n          key={todoList.key}\n        ></List>\n      );\n    });\n\n  const doneLists = todoLists\n    .filter((todoList) => todoList.isDone === true)\n    .map((todoList) => {\n      return (\n        <List\n          handleDelete={deleteTodoListHandler}\n          handleDone={onChangeHandler}\n          todoList={todoList}\n          key={todoList.key}\n        ></List>\n      );\n    });\n\n  // 새로운 title과 desc를 받아 새로운 객체를 만들기 위해 state hook을 선언해줌\n  const [title, setTitle] = useState(\"\");\n  const [desc, setDesc] = useState(\"\");\n\n  // 추가하기를 클랙했을때 실행할 event handler\n  const onSubmitHandler = () => {\n    // title 과 desc가 아무것도 입력되지 않으면 실행되지 않도록 if 함수를 사용함.\n    if (title !== \"\" && desc !== \"\") {\n      // 새로운 객체를 생성해줌. isDone의 기본값은 false이다.\n      const newTodoLists = {\n        id: todoLists.length + 1,\n        key: uuid(),\n        title: title,\n        desc: desc,\n        isDone: false,\n      };\n\n      // todoLists 배열을 복사해주고 newTodoLists를 추가해줌\n      setTodoLists([...todoLists, newTodoLists]);\n    } else {\n      return null;\n    }\n  };\n\n  return (\n    <div class=\"layout\">\n      <div className=\"container\">\n        <div>My Todo List</div>\n        <div>React</div>\n      </div>\n      <div className=\"add-form\">\n        <div className=\"input-style\">\n          <label className=\"form-label\">제목</label>\n          <input\n            className=\"add-input\"\n            // 입력되는 값을 title로 넘겨줌\n            value={title}\n            // state함수를 이용하여 입력되는 값을 배열로 넘겨줌\n            onChange={(e) => setTitle(e.target.value)}\n          />\n          <label className=\"form-label\">내용</label>\n          <input\n            className=\"add-input\"\n            value={desc}\n            onChange={(e) => setDesc(e.target.value)}\n          />\n        </div>\n        <button className=\"add-button\" onClick={onSubmitHandler}>\n          추가하기\n        </button>\n      </div>\n      <div className=\"list-container\">\n        <div>\n          <h2 className=\"list-title\">Working.. 🔥</h2>\n          <div\n            className=\"app-style\" // 렌더링되도록 {workingLists} 변수를 받아옴\n          >\n            {workingLists}\n          </div>\n        </div>\n        <div>\n          <h2 className=\"list-title\">Done..! 🎉</h2>\n          <div className=\"app-style\">{doneLists}</div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// child component인 List를 설정\nfunction List(props) {\n  return (\n    // 컴포넌트로 이러한 사각형 형태의 카드를 만들어준다.\n    <div className=\"square-style\">\n      <h2 // props를 이용해 부모 conponent에서 title을 받아와서 이부분에 렌더링한다.\n      >\n        {props.todoList.title}\n      </h2>\n      <div>{props.todoList.desc}</div>\n      <div className=\"button-set\">\n        <button\n          className=\"todo-delete-button button\"\n          // props로 handleDelete값을 받아오면서 key를 함수로 넘겨준다.\n          onClick={() => {\n            props.handleDelete(props.todoList.key);\n          }}\n        >\n          삭제\n        </button>\n        <button\n          className=\"todo-complete-button button\"\n          onClick={() => {\n            props.handleDone(props.todoList.key);\n          }}\n          // isDone 값에 따라 버튼의 글자가 바뀌도록 삼항연산자를 설정하고 렌더링해준다.\n          // {조건문 ? true인 경우 : false인 경우}\n        >\n          {props.todoList.isDone === true ? \"취소\" : \"완료\"}\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,WAAW,CAAC,CAAC;AACpB;AACA;AACA,OAAOC,IAAI,MAAM,YAAY;AAAC;AAE9B,MAAMC,GAAG,GAAG,MAAM;EAAA;EAChB;EACA,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGJ,QAAQ,CAAC,CACzC;IACE;IACAK,EAAE,EAAE,CAAC;IACL;IACAC,GAAG,EAAEL,IAAI,EAAE;IACXM,KAAK,EAAE,UAAU;IACjBC,IAAI,EAAE,gBAAgB;IACtB;IACAC,MAAM,EAAE;EACV,CAAC,EACD;IACEJ,EAAE,EAAE,CAAC;IACLC,GAAG,EAAEL,IAAI,EAAE;IACXM,KAAK,EAAE,UAAU;IACjBC,IAAI,EAAE,eAAe;IACrBC,MAAM,EAAE;EACV,CAAC,CACF,CAAC;EAEF,MAAMC,qBAAqB,GAAIJ,GAAG,IAAK;IACrC;IACA;IACA,MAAMK,WAAW,GAAGR,SAAS,CAACS,MAAM,CAAEC,QAAQ,IAAKA,QAAQ,CAACP,GAAG,KAAKA,GAAG,CAAC;IACxEF,YAAY,CAACO,WAAW,CAAC;EAC3B,CAAC;EAED,MAAMG,eAAe,GAAIR,GAAG,IAAK;IAC/B;IACA;IACA,MAAMS,KAAK,GAAGZ,SAAS,CAACa,SAAS,CAAEH,QAAQ,IAAKA,QAAQ,CAACP,GAAG,KAAKA,GAAG,CAAC;;IAErE;IACA;IACA,MAAMW,QAAQ,GAAG,CAAC,GAAGd,SAAS,CAAC;;IAE/B;IACA;IACA;IACA,IAAIc,QAAQ,CAACF,KAAK,CAAC,CAACN,MAAM,KAAK,IAAI,EAAE;MACnCQ,QAAQ,CAACF,KAAK,CAAC,GAAG;QAAE,GAAGE,QAAQ,CAACF,KAAK,CAAC;QAAEN,MAAM,EAAE;MAAM,CAAC;IACzD,CAAC,MAAM;MACLQ,QAAQ,CAACF,KAAK,CAAC,GAAG;QAAE,GAAGE,QAAQ,CAACF,KAAK,CAAC;QAAEN,MAAM,EAAE;MAAK,CAAC;IACxD;;IAEA;IACAL,YAAY,CAACa,QAAQ,CAAC;EACxB,CAAC;EAED,MAAMC,YAAY,GAAGf;EACnB;EAAA,CACCS,MAAM,CAAEC,QAAQ,IAAKA,QAAQ,CAACJ,MAAM,KAAK,KAAK;EAC/C;EAAA,CACCU,GAAG,CAAEN,QAAQ,IAAK;IACjB;MAAA;MACE;MACA,QAAC,IAAI;QACH,YAAY,EAAEH,qBAAsB;QACpC,UAAU,EAAEI,eAAgB;QAC5B,QAAQ,EAAED;MAAS,GACdA,QAAQ,CAACP,GAAG;QAAA;QAAA;QAAA;MAAA;IACX;EAEZ,CAAC,CAAC;EAEJ,MAAMc,SAAS,GAAGjB,SAAS,CACxBS,MAAM,CAAEC,QAAQ,IAAKA,QAAQ,CAACJ,MAAM,KAAK,IAAI,CAAC,CAC9CU,GAAG,CAAEN,QAAQ,IAAK;IACjB,oBACE,QAAC,IAAI;MACH,YAAY,EAAEH,qBAAsB;MACpC,UAAU,EAAEI,eAAgB;MAC5B,QAAQ,EAAED;IAAS,GACdA,QAAQ,CAACP,GAAG;MAAA;MAAA;MAAA;IAAA,QACX;EAEZ,CAAC,CAAC;;EAEJ;EACA,MAAM,CAACC,KAAK,EAAEc,QAAQ,CAAC,GAAGrB,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACQ,IAAI,EAAEc,OAAO,CAAC,GAAGtB,QAAQ,CAAC,EAAE,CAAC;;EAEpC;EACA,MAAMuB,eAAe,GAAG,MAAM;IAC5B;IACA,IAAIhB,KAAK,KAAK,EAAE,IAAIC,IAAI,KAAK,EAAE,EAAE;MAC/B;MACA,MAAMgB,YAAY,GAAG;QACnBnB,EAAE,EAAEF,SAAS,CAACsB,MAAM,GAAG,CAAC;QACxBnB,GAAG,EAAEL,IAAI,EAAE;QACXM,KAAK,EAAEA,KAAK;QACZC,IAAI,EAAEA,IAAI;QACVC,MAAM,EAAE;MACV,CAAC;;MAED;MACAL,YAAY,CAAC,CAAC,GAAGD,SAAS,EAAEqB,YAAY,CAAC,CAAC;IAC5C,CAAC,MAAM;MACL,OAAO,IAAI;IACb;EACF,CAAC;EAED,oBACE;IAAK,KAAK,EAAC,QAAQ;IAAA,wBACjB;MAAK,SAAS,EAAC,WAAW;MAAA,wBACxB;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAuB,eACvB;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAgB;IAAA;MAAA;MAAA;MAAA;IAAA,QACZ,eACN;MAAK,SAAS,EAAC,UAAU;MAAA,wBACvB;QAAK,SAAS,EAAC,aAAa;QAAA,wBAC1B;UAAO,SAAS,EAAC,YAAY;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAAW,eACxC;UACE,SAAS,EAAC;UACV;UAAA;UACA,KAAK,EAAEjB;UACP;UAAA;UACA,QAAQ,EAAGmB,CAAC,IAAKL,QAAQ,CAACK,CAAC,CAACC,MAAM,CAACC,KAAK;QAAE;UAAA;UAAA;UAAA;QAAA,QAC1C,eACF;UAAO,SAAS,EAAC,YAAY;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAAW,eACxC;UACE,SAAS,EAAC,WAAW;UACrB,KAAK,EAAEpB,IAAK;UACZ,QAAQ,EAAGkB,CAAC,IAAKJ,OAAO,CAACI,CAAC,CAACC,MAAM,CAACC,KAAK;QAAE;UAAA;UAAA;UAAA;QAAA,QACzC;MAAA;QAAA;QAAA;QAAA;MAAA,QACE,eACN;QAAQ,SAAS,EAAC,YAAY;QAAC,OAAO,EAAEL,eAAgB;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAE/C;IAAA;MAAA;MAAA;MAAA;IAAA,QACL,eACN;MAAK,SAAS,EAAC,gBAAgB;MAAA,wBAC7B;QAAA,wBACE;UAAI,SAAS,EAAC,YAAY;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAAkB,eAC5C;UACE,SAAS,EAAC,WAAW,CAAC;UAAA;UAAA,UAErBL;QAAY;UAAA;UAAA;UAAA;QAAA,QACT;MAAA;QAAA;QAAA;QAAA;MAAA,QACF,eACN;QAAA,wBACE;UAAI,SAAS,EAAC,YAAY;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAAgB,eAC1C;UAAK,SAAS,EAAC,WAAW;UAAA,UAAEE;QAAS;UAAA;UAAA;UAAA;QAAA,QAAO;MAAA;QAAA;QAAA;QAAA;MAAA,QACxC;IAAA;MAAA;MAAA;MAAA;IAAA,QACF;EAAA;IAAA;IAAA;IAAA;EAAA,QACF;AAEV,CAAC;;AAED;AAAA,GArJMlB,GAAG;AAAA,KAAHA,GAAG;AAsJT,SAAS2B,IAAI,CAACC,KAAK,EAAE;EACnB;IAAA;IACE;IACA;MAAK,SAAS,EAAC,cAAc;MAAA,wBAC3B;QAAA,UAEGA,KAAK,CAACjB,QAAQ,CAACN;MAAK;QAAA;QAAA;QAAA;MAAA,QAClB,eACL;QAAA,UAAMuB,KAAK,CAACjB,QAAQ,CAACL;MAAI;QAAA;QAAA;QAAA;MAAA,QAAO,eAChC;QAAK,SAAS,EAAC,YAAY;QAAA,wBACzB;UACE,SAAS,EAAC;UACV;UAAA;UACA,OAAO,EAAE,MAAM;YACbsB,KAAK,CAACC,YAAY,CAACD,KAAK,CAACjB,QAAQ,CAACP,GAAG,CAAC;UACxC,CAAE;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAGK,eACT;UACE,SAAS,EAAC,6BAA6B;UACvC,OAAO,EAAE,MAAM;YACbwB,KAAK,CAACE,UAAU,CAACF,KAAK,CAACjB,QAAQ,CAACP,GAAG,CAAC;UACtC;UACA;UACA;UAAA;UAAA,UAECwB,KAAK,CAACjB,QAAQ,CAACJ,MAAM,KAAK,IAAI,GAAG,IAAI,GAAG;QAAI;UAAA;UAAA;UAAA;QAAA,QACtC;MAAA;QAAA;QAAA;QAAA;MAAA,QACL;IAAA;MAAA;MAAA;MAAA;IAAA;EACF;AAEV;AAAC,MAhCQoB,IAAI;AAkCb,eAAe3B,GAAG;AAAC;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}