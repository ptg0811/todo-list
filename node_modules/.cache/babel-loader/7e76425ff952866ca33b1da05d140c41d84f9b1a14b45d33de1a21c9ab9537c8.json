{"ast":null,"code":"var _jsxFileName = \"/Users/bagtaegeun/projects/todo-list/src/components/todo/Todo.jsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { changeDone, deleteList } from \"/Users/bagtaegeun/projects/todo-list/src/redux/modules/todos\";\n\n// child component인 List를 설정\n// 함수 setTodoLists, 배열 todoLists, map으로 생성된 인자 todoList 를 props 로 받아옴\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Todo = () => {\n  _s();\n  // List\n\n  const todosStore = useSelector(state => state.todos.lists);\n  const dispatch = useDispatch();\n  const title = todosStore.map(list => list.title);\n  const desc = todosStore.map(list => list.desc);\n  const deleteListItem = id => {\n    dispatch(deleteList(id));\n  };\n  const onChangeDone = id => {\n    dispatch(changeDone(id));\n  };\n\n  // End of List\n\n  return (\n    /*#__PURE__*/\n    // 컴포넌트로 이러한 사각형 형태의 카드를 만들어준다.\n    _jsxDEV(\"div\", {\n      className: \"square-style\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: todosStore[0].desc\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button-set\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"todo-delete-button button\",\n          onClick: () => {\n            deleteListItem(todosStore.id);\n          },\n          children: \"\\uC0AD\\uC81C\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"todo-complete-button button\",\n          onClick: () => {\n            onChangeDone(todosStore.id);\n          }\n          // isDone 값에 따라 버튼의 글자가 바뀌도록 삼항연산자를 설정하고 렌더링해준다.\n          // {조건문 ? true인 경우 : false인 경우}\n          ,\n          children: todosStore.isDone === true ? \"취소\" : \"완료\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }, this)\n  );\n};\n_s(Todo, \"ahEtdNj3g/fonhZ57+NMtsxKidQ=\", false, function () {\n  return [useSelector, useDispatch];\n});\n_c = Todo;\nexport default Todo;\nvar _c;\n$RefreshReg$(_c, \"Todo\");","map":{"version":3,"names":["React","useSelector","useDispatch","changeDone","deleteList","Todo","todosStore","state","todos","lists","dispatch","title","map","list","desc","deleteListItem","id","onChangeDone","isDone"],"sources":["/Users/bagtaegeun/projects/todo-list/src/components/todo/Todo.jsx"],"sourcesContent":["import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n  changeDone,\n  deleteList,\n} from \"/Users/bagtaegeun/projects/todo-list/src/redux/modules/todos\";\n\n// child component인 List를 설정\n// 함수 setTodoLists, 배열 todoLists, map으로 생성된 인자 todoList 를 props 로 받아옴\nconst Todo = () => {\n  // List\n\n  const todosStore = useSelector((state) => state.todos.lists);\n  const dispatch = useDispatch();\n\n  const title = todosStore.map((list) => list.title);\n  const desc = todosStore.map((list) => list.desc);\n\n  const deleteListItem = (id) => {\n    dispatch(deleteList(id));\n  };\n\n  const onChangeDone = (id) => {\n    dispatch(changeDone(id));\n  };\n\n  // End of List\n\n  return (\n    // 컴포넌트로 이러한 사각형 형태의 카드를 만들어준다.\n    <div className=\"square-style\">\n      <h2 // props를 이용해 부모 conponent에서 title을 받아와서 이부분에 렌더링한다.\n      >\n        {title}\n      </h2>\n      <div>{todosStore[0].desc}</div>\n      <div className=\"button-set\">\n        <button\n          className=\"todo-delete-button button\"\n          onClick={() => {\n            deleteListItem(todosStore.id);\n          }}\n        >\n          삭제\n        </button>\n        <button\n          className=\"todo-complete-button button\"\n          onClick={() => {\n            onChangeDone(todosStore.id);\n          }}\n          // isDone 값에 따라 버튼의 글자가 바뀌도록 삼항연산자를 설정하고 렌더링해준다.\n          // {조건문 ? true인 경우 : false인 경우}\n        >\n          {todosStore.isDone === true ? \"취소\" : \"완료\"}\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Todo;\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SACEC,UAAU,EACVC,UAAU,QACL,8DAA8D;;AAErE;AACA;AAAA;AACA,MAAMC,IAAI,GAAG,MAAM;EAAA;EACjB;;EAEA,MAAMC,UAAU,GAAGL,WAAW,CAAEM,KAAK,IAAKA,KAAK,CAACC,KAAK,CAACC,KAAK,CAAC;EAC5D,MAAMC,QAAQ,GAAGR,WAAW,EAAE;EAE9B,MAAMS,KAAK,GAAGL,UAAU,CAACM,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACF,KAAK,CAAC;EAClD,MAAMG,IAAI,GAAGR,UAAU,CAACM,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACC,IAAI,CAAC;EAEhD,MAAMC,cAAc,GAAIC,EAAE,IAAK;IAC7BN,QAAQ,CAACN,UAAU,CAACY,EAAE,CAAC,CAAC;EAC1B,CAAC;EAED,MAAMC,YAAY,GAAID,EAAE,IAAK;IAC3BN,QAAQ,CAACP,UAAU,CAACa,EAAE,CAAC,CAAC;EAC1B,CAAC;;EAED;;EAEA;IAAA;IACE;IACA;MAAK,SAAS,EAAC,cAAc;MAAA,wBAC3B;QAAA,UAEGL;MAAK;QAAA;QAAA;QAAA;MAAA,QACH,eACL;QAAA,UAAML,UAAU,CAAC,CAAC,CAAC,CAACQ;MAAI;QAAA;QAAA;QAAA;MAAA,QAAO,eAC/B;QAAK,SAAS,EAAC,YAAY;QAAA,wBACzB;UACE,SAAS,EAAC,2BAA2B;UACrC,OAAO,EAAE,MAAM;YACbC,cAAc,CAACT,UAAU,CAACU,EAAE,CAAC;UAC/B,CAAE;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAGK,eACT;UACE,SAAS,EAAC,6BAA6B;UACvC,OAAO,EAAE,MAAM;YACbC,YAAY,CAACX,UAAU,CAACU,EAAE,CAAC;UAC7B;UACA;UACA;UAAA;UAAA,UAECV,UAAU,CAACY,MAAM,KAAK,IAAI,GAAG,IAAI,GAAG;QAAI;UAAA;UAAA;UAAA;QAAA,QAClC;MAAA;QAAA;QAAA;QAAA;MAAA,QACL;IAAA;MAAA;MAAA;MAAA;IAAA;EACF;AAEV,CAAC;AAAC,GAjDIb,IAAI;EAAA,QAGWJ,WAAW,EACbC,WAAW;AAAA;AAAA,KAJxBG,IAAI;AAmDV,eAAeA,IAAI;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}