{"ast":null,"code":"var _jsxFileName = \"/Users/bagtaegeun/projects/todo-list/src/components/Lists.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// child component인 List를 설정\nconst List = _ref => {\n  let {\n    setTodoLists,\n    todoLists,\n    todoList\n  } = _ref;\n  const deleteTodoList = id => {\n    // '삭제' 버튼을 클릭했을때 실행되는 handler\n    // filter를 통해서 받아오는 id값과 다른 id값을 가진 객체들만으로 새로운 배열을 구성해서 state로 넘겨주는 것.\n    const newTodoList = todoLists.filter(todoList => todoList.id !== id);\n    setTodoLists(newTodoList);\n  };\n  const onChangeDone = id => {\n    const copyTodo = todoLists.map(todoList => {\n      if (todoList.id === id) {\n        return {\n          ...todoList,\n          isDone: !todoList.isDone\n        };\n      }\n      return todoList;\n    });\n    setTodoLists(copyTodo);\n    console.log(todoLists.map(todoList => {\n      if (todoList.id === id) {\n        return {\n          ...todoList,\n          isDone: !todoList.isDone\n        };\n      }\n      return todoList;\n    }));\n  };\n  return (\n    /*#__PURE__*/\n    // 컴포넌트로 이러한 사각형 형태의 카드를 만들어준다.\n    _jsxDEV(\"div\", {\n      className: \"square-style\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: todoList.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: todoList.desc\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button-set\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"todo-delete-button button\"\n          // props로 handleDelete값을 받아오면서 id를 함수로 넘겨준다.\n          ,\n          onClick: () => {\n            deleteTodoList(todoList.id);\n          },\n          children: \"\\uC0AD\\uC81C\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"todo-complete-button button\",\n          onClick: () => {\n            onChangeDone(todoList.id);\n          }\n          // isDone 값에 따라 버튼의 글자가 바뀌도록 삼항연산자를 설정하고 렌더링해준다.\n          // {조건문 ? true인 경우 : false인 경우}\n          ,\n          children: todoList.isDone === true ? \"취소\" : \"완료\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 5\n    }, this)\n  );\n};\n_c = List;\nexport default List;\nvar _c;\n$RefreshReg$(_c, \"List\");","map":{"version":3,"names":["List","setTodoLists","todoLists","todoList","deleteTodoList","id","newTodoList","filter","onChangeDone","copyTodo","map","isDone","console","log","title","desc"],"sources":["/Users/bagtaegeun/projects/todo-list/src/components/Lists.js"],"sourcesContent":["// child component인 List를 설정\nconst List = ({ setTodoLists, todoLists, todoList }) => {\n  const deleteTodoList = (id) => {\n    // '삭제' 버튼을 클릭했을때 실행되는 handler\n    // filter를 통해서 받아오는 id값과 다른 id값을 가진 객체들만으로 새로운 배열을 구성해서 state로 넘겨주는 것.\n    const newTodoList = todoLists.filter((todoList) => todoList.id !== id);\n    setTodoLists(newTodoList);\n  };\n\n  const onChangeDone = (id) => {\n    const copyTodo = todoLists.map((todoList) => {\n      if (todoList.id === id) {\n        return { ...todoList, isDone: !todoList.isDone };\n      }\n      return todoList;\n    });\n    setTodoLists(copyTodo);\n    console.log(\n      todoLists.map((todoList) => {\n        if (todoList.id === id) {\n          return { ...todoList, isDone: !todoList.isDone };\n        }\n        return todoList;\n      })\n    );\n  };\n\n  return (\n    // 컴포넌트로 이러한 사각형 형태의 카드를 만들어준다.\n    <div className=\"square-style\">\n      <h2 // props를 이용해 부모 conponent에서 title을 받아와서 이부분에 렌더링한다.\n      >\n        {todoList.title}\n      </h2>\n      <div>{todoList.desc}</div>\n      <div className=\"button-set\">\n        <button\n          className=\"todo-delete-button button\"\n          // props로 handleDelete값을 받아오면서 id를 함수로 넘겨준다.\n          onClick={() => {\n            deleteTodoList(todoList.id);\n          }}\n        >\n          삭제\n        </button>\n        <button\n          className=\"todo-complete-button button\"\n          onClick={() => {\n            onChangeDone(todoList.id);\n          }}\n          // isDone 값에 따라 버튼의 글자가 바뀌도록 삼항연산자를 설정하고 렌더링해준다.\n          // {조건문 ? true인 경우 : false인 경우}\n        >\n          {todoList.isDone === true ? \"취소\" : \"완료\"}\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default List;\n"],"mappings":";;AAAA;AACA,MAAMA,IAAI,GAAG,QAA2C;EAAA,IAA1C;IAAEC,YAAY;IAAEC,SAAS;IAAEC;EAAS,CAAC;EACjD,MAAMC,cAAc,GAAIC,EAAE,IAAK;IAC7B;IACA;IACA,MAAMC,WAAW,GAAGJ,SAAS,CAACK,MAAM,CAAEJ,QAAQ,IAAKA,QAAQ,CAACE,EAAE,KAAKA,EAAE,CAAC;IACtEJ,YAAY,CAACK,WAAW,CAAC;EAC3B,CAAC;EAED,MAAME,YAAY,GAAIH,EAAE,IAAK;IAC3B,MAAMI,QAAQ,GAAGP,SAAS,CAACQ,GAAG,CAAEP,QAAQ,IAAK;MAC3C,IAAIA,QAAQ,CAACE,EAAE,KAAKA,EAAE,EAAE;QACtB,OAAO;UAAE,GAAGF,QAAQ;UAAEQ,MAAM,EAAE,CAACR,QAAQ,CAACQ;QAAO,CAAC;MAClD;MACA,OAAOR,QAAQ;IACjB,CAAC,CAAC;IACFF,YAAY,CAACQ,QAAQ,CAAC;IACtBG,OAAO,CAACC,GAAG,CACTX,SAAS,CAACQ,GAAG,CAAEP,QAAQ,IAAK;MAC1B,IAAIA,QAAQ,CAACE,EAAE,KAAKA,EAAE,EAAE;QACtB,OAAO;UAAE,GAAGF,QAAQ;UAAEQ,MAAM,EAAE,CAACR,QAAQ,CAACQ;QAAO,CAAC;MAClD;MACA,OAAOR,QAAQ;IACjB,CAAC,CAAC,CACH;EACH,CAAC;EAED;IAAA;IACE;IACA;MAAK,SAAS,EAAC,cAAc;MAAA,wBAC3B;QAAA,UAEGA,QAAQ,CAACW;MAAK;QAAA;QAAA;QAAA;MAAA,QACZ,eACL;QAAA,UAAMX,QAAQ,CAACY;MAAI;QAAA;QAAA;QAAA;MAAA,QAAO,eAC1B;QAAK,SAAS,EAAC,YAAY;QAAA,wBACzB;UACE,SAAS,EAAC;UACV;UAAA;UACA,OAAO,EAAE,MAAM;YACbX,cAAc,CAACD,QAAQ,CAACE,EAAE,CAAC;UAC7B,CAAE;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAGK,eACT;UACE,SAAS,EAAC,6BAA6B;UACvC,OAAO,EAAE,MAAM;YACbG,YAAY,CAACL,QAAQ,CAACE,EAAE,CAAC;UAC3B;UACA;UACA;UAAA;UAAA,UAECF,QAAQ,CAACQ,MAAM,KAAK,IAAI,GAAG,IAAI,GAAG;QAAI;UAAA;UAAA;UAAA;QAAA,QAChC;MAAA;QAAA;QAAA;QAAA;MAAA,QACL;IAAA;MAAA;MAAA;MAAA;IAAA;EACF;AAEV,CAAC;AAAC,KAzDIX,IAAI;AA2DV,eAAeA,IAAI;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}